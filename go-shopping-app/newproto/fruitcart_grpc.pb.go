// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: newproto/fruitcart.proto

package go_fruit_cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FruitCartManagementServiceClient is the client API for FruitCartManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FruitCartManagementServiceClient interface {
	GetUser(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*UserDetails, error)
	GetProduct(ctx context.Context, in *ProductCredential, opts ...grpc.CallOption) (*ProductDetails, error)
	GetTotalCartAmount(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*TotalCartAmount, error)
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllUsers, error)
}

type fruitCartManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFruitCartManagementServiceClient(cc grpc.ClientConnInterface) FruitCartManagementServiceClient {
	return &fruitCartManagementServiceClient{cc}
}

func (c *fruitCartManagementServiceClient) GetUser(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*UserDetails, error) {
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, "/FruitCartManagementService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fruitCartManagementServiceClient) GetProduct(ctx context.Context, in *ProductCredential, opts ...grpc.CallOption) (*ProductDetails, error) {
	out := new(ProductDetails)
	err := c.cc.Invoke(ctx, "/FruitCartManagementService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fruitCartManagementServiceClient) GetTotalCartAmount(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*TotalCartAmount, error) {
	out := new(TotalCartAmount)
	err := c.cc.Invoke(ctx, "/FruitCartManagementService/GetTotalCartAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fruitCartManagementServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllUsers, error) {
	out := new(AllUsers)
	err := c.cc.Invoke(ctx, "/FruitCartManagementService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FruitCartManagementServiceServer is the server API for FruitCartManagementService service.
// All implementations must embed UnimplementedFruitCartManagementServiceServer
// for forward compatibility
type FruitCartManagementServiceServer interface {
	GetUser(context.Context, *UserCredential) (*UserDetails, error)
	GetProduct(context.Context, *ProductCredential) (*ProductDetails, error)
	GetTotalCartAmount(context.Context, *UserCredential) (*TotalCartAmount, error)
	GetUsers(context.Context, *Empty) (*AllUsers, error)
	mustEmbedUnimplementedFruitCartManagementServiceServer()
}

// UnimplementedFruitCartManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFruitCartManagementServiceServer struct {
}

func (UnimplementedFruitCartManagementServiceServer) GetUser(context.Context, *UserCredential) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFruitCartManagementServiceServer) GetProduct(context.Context, *ProductCredential) (*ProductDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedFruitCartManagementServiceServer) GetTotalCartAmount(context.Context, *UserCredential) (*TotalCartAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCartAmount not implemented")
}
func (UnimplementedFruitCartManagementServiceServer) GetUsers(context.Context, *Empty) (*AllUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedFruitCartManagementServiceServer) mustEmbedUnimplementedFruitCartManagementServiceServer() {
}

// UnsafeFruitCartManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FruitCartManagementServiceServer will
// result in compilation errors.
type UnsafeFruitCartManagementServiceServer interface {
	mustEmbedUnimplementedFruitCartManagementServiceServer()
}

func RegisterFruitCartManagementServiceServer(s grpc.ServiceRegistrar, srv FruitCartManagementServiceServer) {
	s.RegisterService(&FruitCartManagementService_ServiceDesc, srv)
}

func _FruitCartManagementService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitCartManagementServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FruitCartManagementService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitCartManagementServiceServer).GetUser(ctx, req.(*UserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _FruitCartManagementService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitCartManagementServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FruitCartManagementService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitCartManagementServiceServer).GetProduct(ctx, req.(*ProductCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _FruitCartManagementService_GetTotalCartAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitCartManagementServiceServer).GetTotalCartAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FruitCartManagementService/GetTotalCartAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitCartManagementServiceServer).GetTotalCartAmount(ctx, req.(*UserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _FruitCartManagementService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitCartManagementServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FruitCartManagementService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitCartManagementServiceServer).GetUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FruitCartManagementService_ServiceDesc is the grpc.ServiceDesc for FruitCartManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FruitCartManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FruitCartManagementService",
	HandlerType: (*FruitCartManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _FruitCartManagementService_GetUser_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _FruitCartManagementService_GetProduct_Handler,
		},
		{
			MethodName: "GetTotalCartAmount",
			Handler:    _FruitCartManagementService_GetTotalCartAmount_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _FruitCartManagementService_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newproto/fruitcart.proto",
}
